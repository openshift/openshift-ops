#!/usr/bin/env python2
# vim: expandtab:tabstop=4:shiftwidth=4
''' ssh wrapper with multi-inventory capabilities '''

import argparse
import errno
import traceback
import sys
import os
import ConfigParser

# openshift-tools python RPMs not installed on jenkins instance
# pylint: disable=import-error
from openshift_tools.inventory_clients import inventory_util

CONFIG_MAIN_SECTION = 'main'

# Allow more than 7 instance attributes
# pylint: disable=too-many-instance-attributes
class Ossh(object):
    ''' ssh wrapper adding multi-inventory awareness '''
    def __init__(self):
        self.user = None
        self.host = None
        self.host_inventory = None
        self.file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)))

        # Default the config path to /etc
        self.config_path = os.path.join(os.path.sep, 'etc',  \
                                        'openshift_tools', \
                                        'openshift_tools.conf')

        self.args, self.parser = self.parse_cli_args()
        self.parse_config_file()

        self.inventory_util = inventory_util.InventoryUtil()

        self.get_hosts()

        # parse host and user
        self.process_host()

        if self.args.host == '' and not self.args.list:
            self.parser.print_help()
            return

        if self.args.debug:
            print self.args

        # perform the SSH
        if self.args.list:
            try:
                self.list_hosts()
            # You can get IOErrors when piping output to another tool
            # (ie 'head') b/c the pipe being written to is closed by
            # the reader. This is okay. Catch and ignore EPIPE errors.
            except IOError as e:
                if e.errno == errno.EPIPE:
                    pass
                else:
                    raise e
        else:
            self.ssh()

    def parse_config_file(self):
        ''' read in config from file '''
        if os.path.isfile(self.config_path):
            config = ConfigParser.ConfigParser()
            config.read(self.config_path)

    # pylint: disable=no-self-use
    def parse_cli_args(self):
        ''' read cli parameters '''
        parser = argparse.ArgumentParser(description='OpenShift Online SSH Tool.')
        parser.add_argument('-d', '--debug', default=False,
                            action="store_true", help="debug mode")
        parser.add_argument('-v', '--verbose', default=False,
                            action="store_true", help="Verbose?")
        parser.add_argument('--list', default=False,
                            action="store_true", help="list out hosts")
        parser.add_argument('-c', '--command', action='store',
                            help='Command to run on remote host')
        parser.add_argument('-l', '--login_name', action='store',
                            help='User in which to ssh as')

        parser.add_argument('-o', '--ssh_opts', action='store',
                            help='options to pass to SSH.\n \
                                  "-oForwardX11=yes,TCPKeepAlive=yes"')
        parser.add_argument('-A', default=False, action="store_true",
                            help='Forward authentication agent')
        parser.add_argument('host', nargs='?', default='')

        args = parser.parse_args()
        return args, parser

    def process_host(self):
        '''Determine host name and user name for SSH.
        '''

        parts = self.args.host.split('@')

        # parse username if passed
        if len(parts) > 1:
            self.user = parts[0]
            self.host = parts[1]
        else:
            self.host = parts[0]

            if self.args.login_name:
                self.user = self.args.login_name


    def get_hosts(self):
        '''Query our host inventory and return a dict where the format '''
        self.host_inventory = self.inventory_util.inventory['_meta']['hostvars']

    def find_host_by_attr(self, attribute):
        '''find self.host by an attribute'''
        results = {}
        for host, values in self.host_inventory.iteritems():
            if not values.has_key(attribute):
                continue
            if self.host == values[attribute]:
                results[host] = values

        return results

    def select_host(self):
        '''select host attempts to match the host specified
           on the command line with a list of hosts.
        '''
        results = {}
        if self.host_inventory.has_key(self.host):
            results[self.host] = self.host_inventory[self.host]
        # check for an ec2_private_dns_name, like: ip-172-31-49-44.ec2.internal
        elif self.host.startswith("ip-"):
            results.update(self.find_host_by_attr('ec2_private_dns_name'))
        # check for an aws instance id, like: i-0015104cc95b00f77
        elif self.host.startswith("i-"):
            results.update(self.find_host_by_attr('oo_id'))

        # if all else fails, try to match oo_name
        else:
            results.update(self.find_host_by_attr('oo_name'))

        if results == {}:
            print "Could not find specified host: %s." % self.host

        if len(results) > 1:
            print("Found multiple possible hosts: %s" % ",".join(results))
            return None

        if len(results) == 0:
            return None

        return results.items()[0]

    def list_hosts(self):
        '''Function to print out the host inventory.
        '''
        for _, server_info in self.host_inventory.items():
            if not server_info.get('synthetic', False):
                print '%-42s %-18s %-8s %-25s %-18s %-18s' % (\
                    server_info.get('oo_name', 'None'),
                    server_info.get('oo_clusterid', 'None'),
                    server_info.get('oo_environment', 'None'),
                    server_info.get('oo_id', 'None'),
                    server_info.get('oo_public_ip', 'None'),
                    server_info.get('oo_private_ip', 'None'))

    def ssh(self):
        '''SSH to a specified host
        '''
        try:
            # shell args start with the program name in position 1
            ssh_args = ['/usr/bin/ssh']

            if self.user:
                ssh_args.append('-l%s' % self.user)

            if self.args.A:
                ssh_args.append('-A')

            if self.args.verbose:
                ssh_args.append('-vvv')

            if self.args.ssh_opts:
                for arg in self.args.ssh_opts.split(","):
                    ssh_args.append("-o%s" % arg)

            results = self.select_host()
            if not results:
                return  # early exit, no results

            # Assume we have one and only one.
            server_info = results[1]

            ssh_args.append(server_info['oo_public_ip'])

            #last argument
            if self.args.command:
                ssh_args.append("%s" % self.args.command)

            print "Running: %s\n" % ' '.join(ssh_args)

            os.execve('/usr/bin/ssh', ssh_args, os.environ)
        # catch any and all exceptions
        # pylint: disable=bare-except
        except:
            print traceback.print_exc()
            print sys.exc_info()


if __name__ == '__main__':
    Ossh()


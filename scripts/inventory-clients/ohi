#!/usr/bin/env python
'''
Ohi = Openshift Host Inventory

This script provides an easy way to look at your host inventory.

This depends on multi_inventory being setup correctly.
'''
# vim: expandtab:tabstop=4:shiftwidth=4
# pylint: disable=too-many-branches
# pylint: disable=too-many-return-statements

import argparse
import sys
import os
import ConfigParser
import json

# openshift-tools python libs not installed on jenkins instance
# pylint: disable=import-error
from openshift_tools.inventory_clients import inventory_util
from openshift_tools.inventory_clients import utils
from openshift_tools.inventory_clients.inventory_util import ArgumentError


CONFIG_MAIN_SECTION = 'main'
CONFIG_HOST_TYPE_ALIAS_SECTION = 'host_type_aliases'


class Ohi(object):
    '''
        Class for managing openshift host inventory
    '''
    def __init__(self):
        self.host_type_aliases = {}
        self.file_path = os.path.join(os.path.dirname(os.path.realpath(__file__)))

        # Default the config path to /etc
        self.config_path = os.path.join(os.path.sep, 'etc',  \
                                        'openshift_tools', \
                                        'openshift_tools.conf')

        self.args = None
        self.parse_cli_args()
        self.parse_config_file()

        self.inventory = inventory_util.InventoryUtil(self.host_type_aliases)

    def run(self):
        '''
            Call into inventory_util and retrieve the desired hosts and environments
        '''

        if self.args.get_node_var:
            if self.args.node:
                node_var = self.inventory.get_node_variable(self.args.node, self.args.get_node_var)
                if node_var is None:
                    print "Unable to determine variable.  node: %s   variable: %s" %(self.args.node,
                                                                                     self.args.get_node_var)
                    return 1
                print node_var
                return 0

            print "Please specify a node (--node) when using --get-node-var"
            return 1

        if self.args.get_cluster_var:
            if self.args.cluster:
                if len(self.args.cluster) == 1:
                    cluster_var = self.inventory.get_cluster_variable(self.args.cluster[0], self.args.get_cluster_var)
                    if cluster_var is None:
                        print "Unable to determine cluster variable: %s" %self.args.get_cluster_var
                        return 1
                    print cluster_var
                    return 0

            print "Please specify a single cluster when using --get-cluster-var"
            return 1

        if self.args.list_host_types:
            self.inventory.print_host_types()
            return 0

        if self.args.list_clusters:
            self.inventory.print_cluster_list()
            return 0

        if self.args.v2:
            version = '2'
        elif self.args.all_versions:
            version = 'all'
        else:
            version = '3'

        hosts = self.inventory.get_host_list(clusters=self.args.cluster,
                                             host_type=self.args.host_type,
                                             sub_host_type=self.args.sub_host_type,
                                             envs=self.args.env,
                                             version=version)

        if hosts is None:
            # We weren't able to determine what they wanted to do
            raise ArgumentError("Invalid combination of arguments")

        if self.args.output is None:
            self.default_output(hosts)
        elif self.args.output == "json":
            self.json_output(hosts)
        elif self.args.output == "wide":
            self.wide_output(hosts)
        else:
            raise ArgumentError("Invalid output format")

        return 0

    def default_output(self, hosts):
        '''
            Prints the classic output, useful for generating pssh files
        '''
        if self.args.ip:
            hosts = self.inventory.convert_to_ip(hosts)

        for host in sorted(hosts, key=utils.normalize_dnsname):
            if self.args.user:
                print "%s@%s" % (self.args.user, host)
            else:
                print host

    def wide_output(self, hosts):
        '''
            Prints the external name, internal name, external ip, and internal ip
        '''
        for host in sorted(hosts, key=utils.normalize_dnsname):
            temp_host = {
                'ec2_private_dns_name': '',
                'oo_public_ip': '',
                'oo_private_ip': ''
            }
            for key in temp_host:
                if key in self.inventory.inventory.get('_meta').get('hostvars').get(host):
                    temp_host[key] = self.inventory.inventory.get('_meta').get('hostvars').get(host).get(key)

            print '%-42s %-60s %-18s %-18s' % (\
                  host,
                  temp_host['ec2_private_dns_name'],
                  temp_host['oo_public_ip'],
                  temp_host['oo_private_ip'])

    def json_output(self, hosts):
        '''
            Prints the name and ip in json format, useful for reading the output into ansible
        '''
        out_hosts = []
        for host in hosts:
            temp_host = {
                'name': host
            }
            for key in ['oo_public_ip', 'oo_clusterid', 'oo_hosttype', 'oo_subhosttype', 'ec2_private_dns_name']:
                if key in self.inventory.inventory.get('_meta').get('hostvars').get(host):
                    temp_host[key] = self.inventory.inventory.get('_meta').get('hostvars').get(host).get(key)

            out_hosts.append(temp_host)
        print json.dumps(out_hosts)

    def parse_config_file(self):
        '''
            Parse the config file for ohi
        '''
        if os.path.isfile(self.config_path):
            config = ConfigParser.ConfigParser()
            config.read(self.config_path)

            self.host_type_aliases = {}
            if config.has_section(CONFIG_HOST_TYPE_ALIAS_SECTION):
                for alias in config.options(CONFIG_HOST_TYPE_ALIAS_SECTION):
                    value = config.get(CONFIG_HOST_TYPE_ALIAS_SECTION, alias).split(',')
                    self.host_type_aliases[alias] = value

    def parse_cli_args(self):
        """Setup the command line parser with the options we want
        """

        parser = argparse.ArgumentParser(description='OpenShift Host Inventory')

        parser.add_argument('--list-host-types', default=False, action='store_true', help='List all of the host types')
        parser.add_argument('--list-clusters', default=False, action='store_true', help='List all of the clusters')

        parser.add_argument('--get-cluster-var', default=False, action='store',
                            help='Return a var that is the same across a clusters')

        parser.add_argument('--get-node-var', default=False, action='store',
                            help='Return a var from a specific node')

        parser.add_argument('-n', '--node', action='store', default=None, help='node to use')

        parser.add_argument('--list', default=False, action='store_true', help='List all hosts')

        parser.add_argument('-c', '--cluster', action="append", help="Which clusterid to use")
        parser.add_argument('-e', '--env', action="append", help="Which environment to use")

        parser.add_argument('-t', '--host-type', action="store", help="Which host type to use")

        parser.add_argument('-s', '--sub-host-type', action="store", help="Which sub host type to use")

        parser.add_argument('-l', '--user', action='store', default=None, help='username')

        parser.add_argument('-o', '--output', action='store', default=None, choices=['json', 'wide'],
                            help='Format Output; valid options: json, wide')


        parser.add_argument('--v2', action='store_true', default=False,
                            help='Specify the openshift version. Default is 2')

        parser.add_argument('--v3', action='store_true', default=True,
                            help='Specify the openshift version.')

        parser.add_argument('--ip', action='store_true', default=False,
                            help='Return ip address only.')

        parser.add_argument('--all-versions', action='store_true', default=False,
                            help='Specify the openshift version. Return all versions')

        self.args = parser.parse_args()

def main():
    '''
    Ohi will do its work here
    '''
    if len(sys.argv) == 1:
        print "\nError: No options given. Use --help to see the available options\n"
        sys.exit(0)

    try:
        ohi = Ohi()
        exitcode = ohi.run()
        sys.exit(exitcode)
    except ArgumentError as err:
        print "\nError: %s\n" % err.message

if __name__ == '__main__':
    main()

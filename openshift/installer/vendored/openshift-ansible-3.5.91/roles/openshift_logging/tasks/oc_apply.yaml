---
- oc_obj:
    kind: "{{ file_content.kind }}"
    name: "{{ file_content.metadata.name }}"
    state: present
    namespace: "{{ namespace }}"
    files:
    - "{{ file_name }}"
  when: file_content.kind not in ["Service", "Route"]

## still need to do this for services until the template logic is replaced by oc_*
- block:
  - name: Checking generation of {{file_content.kind}} {{file_content.metadata.name}}
    command: >
      {{ openshift.common.client_binary }}
      --config={{ kubeconfig }}
      get {{file_content.kind}} {{file_content.metadata.name}}
      -o jsonpath='{.metadata.resourceVersion}'
      -n {{namespace}}
    register: generation_init
    failed_when: "'not found' not in generation_init.stderr and generation_init.stdout == ''"
    changed_when: no

  - name: Applying {{file_name}}
    command: >
      {{ openshift.common.client_binary }} --config={{ kubeconfig }}
      apply -f {{ file_name }}
      -n {{ namespace }}
    register: generation_apply
    failed_when: "'error' in generation_apply.stderr"
    changed_when: no

  - name: Removing previous {{file_name}}
    command: >
      {{ openshift.common.client_binary }} --config={{ kubeconfig }}
      delete -f {{ file_name }}
      -n {{ namespace }}
    register: generation_delete
    failed_when: "'error' in generation_delete.stderr"
    changed_when: generation_delete.rc == 0
    when: "'field is immutable' in generation_apply.stderr"

  - name: Recreating {{file_name}}
    command: >
      {{ openshift.common.client_binary }} --config={{ kubeconfig }}
      apply -f {{ file_name }}
      -n {{ namespace }}
    register: generation_apply
    failed_when: "'error' in generation_apply.stderr"
    changed_when: generation_apply.rc == 0
    when: "'field is immutable' in generation_apply.stderr"
  when: file_content.kind in ["Service", "Route"]

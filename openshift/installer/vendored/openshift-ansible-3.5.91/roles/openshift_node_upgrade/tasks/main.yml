---
# input variables:
# - l_docker_upgrade
# - openshift.common.is_atomic
# - node_config_hook
# - openshift_pkg_version
# - openshift.common.is_containerized
# - deployment_type
# - openshift_release

# tasks file for openshift_node_upgrade

- name: Stop node and openvswitch services
  service:
    name: "{{ item }}"
    state: stopped
  with_items:
  - "{{ openshift.common.service_type }}-node"
  - openvswitch
  failed_when: false

- name: Stop additional containerized services
  service:
    name: "{{ item }}"
    state: stopped
  with_items:
  - "{{ openshift.common.service_type }}-master"
  - "{{ openshift.common.service_type }}-master-controllers"
  - "{{ openshift.common.service_type }}-master-api"
  - etcd_container
  failed_when: false
  when: openshift.common.is_containerized | bool

- include: docker/upgrade.yml
  vars:
    # We will restart Docker ourselves after everything is ready:
    skip_docker_restart: True
  when:
  - l_docker_upgrade is defined
  - l_docker_upgrade | bool

- include: "{{ node_config_hook }}"
  when: node_config_hook is defined

- include: rpm_upgrade.yml
  vars:
    component: "node"
    openshift_version: "{{ openshift_pkg_version | default('') }}"
  when: not openshift.common.is_containerized | bool

- name: Remove obsolete docker-sdn-ovs.conf
  file:
    path: "/etc/systemd/system/docker.service.d/docker-sdn-ovs.conf"
    state: absent
  when: (deployment_type == 'openshift-enterprise' and openshift_release | version_compare('3.4', '>='))
     or (deployment_type == 'origin' and openshift_release | version_compare('1.4', '>='))

- include: containerized_node_upgrade.yml
  when: openshift.common.is_containerized | bool

- name: Upgrade openvswitch
  package:
    name: openvswitch
    state: latest
  when: not openshift.common.is_containerized | bool

# Restart all services
- include: restart.yml

- name: Wait for node to be ready
  oc_obj:
    state: list
    kind: node
    name: "{{ openshift.common.hostname | lower }}"
  register: node_output
  delegate_to: "{{ groups.oo_first_master.0 }}"
  until: node_output.results.results[0].status.conditions | selectattr('type', 'match', '^Ready$') | map(attribute='status') | join | bool == True
  # Give the node two minutes to come back online.
  retries: 24
  delay: 5

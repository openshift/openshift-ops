---
- name: Retrieve list of fluentd hosts
  oc_obj:
    state: list
    kind: node
  when: "'--all' in openshift_logging_fluentd_hosts"
  register: fluentd_hosts

- name: Set fact openshift_logging_fluentd_hosts
  set_fact:
    openshift_logging_fluentd_hosts: "{{ fluentd_hosts.results.results[0]['items'] | map(attribute='metadata.name') | list }}"
  when: "'--all' in openshift_logging_fluentd_hosts"

- name: start fluentd
  oc_label:
    name: "{{ fluentd_host }}"
    kind: node
    state: add
    labels: "{{ openshift_logging_fluentd_nodeselector | oo_dict_to_list_of_dict }}"
  with_items: "{{ openshift_logging_fluentd_hosts }}"
  loop_control:
    loop_var: fluentd_host

- name: Retrieve elasticsearch
  oc_obj:
    state: list
    kind: dc
    selector: "component=es"
    namespace: "{{openshift_logging_namespace}}"
  register: es_dc

- name: start elasticsearch
  oc_scale:
    kind: dc
    name: "{{ object }}"
    namespace: "{{openshift_logging_namespace}}"
    replicas: 1
  with_items: "{{ es_dc.results.results[0]['items'] | map(attribute='metadata.name') | list }}"
  loop_control:
    loop_var: object

- name: Retrieve kibana
  oc_obj:
    state: list
    kind: dc
    selector: "component=kibana"
    namespace: "{{openshift_logging_namespace}}"
  register: kibana_dc

- name: start kibana
  oc_scale:
    kind: dc
    name: "{{ object }}"
    namespace: "{{openshift_logging_namespace}}"
    replicas: "{{ openshift_logging_kibana_replica_count | default (1) }}"
  with_items: "{{ kibana_dc.results.results[0]['items'] | map(attribute='metadata.name') | list }}"
  loop_control:
    loop_var: object

- name: Retrieve curator
  oc_obj:
    state: list
    kind: dc
    selector: "component=curator"
    namespace: "{{openshift_logging_namespace}}"
  register: curator_dc

- name: start curator
  oc_scale:
    kind: dc
    name: "{{ object }}"
    namespace: "{{openshift_logging_namespace}}"
    replicas: 1
  with_items: "{{ curator_dc.results.results[0]['items'] | map(attribute='metadata.name') | list }}"
  loop_control:
    loop_var: object

- name: Retrieve elasticsearch-ops
  oc_obj:
    state: list
    kind: dc
    selector: "component=es-ops"
    namespace: "{{openshift_logging_namespace}}"
  register: es_dc

- name: start elasticsearch-ops
  oc_scale:
    kind: dc
    name: "{{ object }}"
    namespace: "{{openshift_logging_namespace}}"
    replicas: 1
  with_items: "{{ es_dc.results.results[0]['items'] | map(attribute='metadata.name') | list }}"
  loop_control:
    loop_var: object
  when: openshift_logging_use_ops | bool

- name: Retrieve kibana-ops
  oc_obj:
    state: list
    kind: dc
    selector: "component=kibana-ops"
    namespace: "{{openshift_logging_namespace}}"
  register: kibana_dc

- name: start kibana-ops
  oc_scale:
    kind: dc
    name: "{{ object }}"
    namespace: "{{openshift_logging_namespace}}"
    replicas: "{{ openshift_logging_kibana_ops_replica_count | default (1) }}"
  with_items: "{{ kibana_dc.results.results[0]['items'] | map(attribute='metadata.name') | list }}"
  loop_control:
    loop_var: object
  when: openshift_logging_use_ops | bool

- name: Retrieve curator
  oc_obj:
    state: list
    kind: dc
    selector: "component=curator-ops"
    namespace: "{{openshift_logging_namespace}}"
  register: curator_dc

- name: start curator-ops
  oc_scale:
    kind: dc
    name: "{{ object }}"
    namespace: "{{openshift_logging_namespace}}"
    replicas: 1
  with_items: "{{ curator_dc.results.results[0]['items'] | map(attribute='metadata.name') | list }}"
  loop_control:
    loop_var: object
  when: openshift_logging_use_ops | bool

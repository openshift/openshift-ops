---
- hosts: localhost
  gather_facts: no
  vars_files:
  - /root/default_vars.yml
  - /root/{{ g_oso_host_type }}_default_vars.yml
  vars:
    g_oso_cluster_id: "{{ lookup('env', 'OSO_CLUSTER_ID') | default('undefcid', True) }}"
    g_oso_environment: "{{ lookup('env', 'OSO_ENVIRONMENT') | default('undefenv', True) }}"
    g_oso_host_type: "{{ lookup('env', 'OSO_HOST_TYPE') }}"
    g_oso_master_ha: "{{ lookup('env', 'OSO_MASTER_HA') | default(g_default_openshift_master_ha, True) }}"

    g_zagg_client_config:
      host:
        name: "{{ lookup('env', 'ZAGG_CLIENT_HOSTNAME') | default(g_default_zagg_client_hostname, True) }}"
      zagg:
        url: "{{ lookup('env', 'ZAGG_URL') | default(g_default_zagg_url, True) }}"
        user: "{{ lookup('env', 'ZAGG_USER') | default(g_default_zagg_user, True) }}"
        pass: "{{ lookup('env', 'ZAGG_PASSWORD') | default(g_default_zagg_pass, True) }}"
        ssl_verify: "{{ lookup('env', 'ZAGG_SSL_VERIFY') | default(g_default_zagg_ssl_verify, True) }}"
        verbose: "{{ lookup('env', 'ZAGG_VERBOSE') | default(g_default_zagg_verbose, True) }}"
        debug: "{{ lookup('env', 'ZAGG_DEBUG') | default(g_default_zagg_debug, True) }}"
      pcp:
        metrics: "{{ g_default_pcp_metrics }}"
      heartbeat:
        templates: "{{ g_default_templates }}"
        hostgroups:
        - "{{ g_oso_cluster_id }}"
        - "{{ g_oso_environment }}"

    # Generic Linux Checks
    g_zagg_client_cron:
    - name: send pcp ping every 5 mintues
      minute: "*/5"
      job: ops-runner -f -s 15 -n cspp.pcp.ping /usr/bin/cron-send-pcp-ping

    - name: run pcp checks every 5 minutes
      minute: "*/5"
      job: ops-runner -f -s 15 -n ozpc.send.pcp /usr/bin/ops-zagg-pcp-client

    - name: run pcp sampler every 5 minutes
      minute: "*/5"
      job: ops-runner -f -s 15 -n cspsm.kernal.all.cpu /usr/bin/cron-send-pcp-sampled-metrics -m kernel.all.cpu.idle -m kernel.all.cpu.nice -m kernel.all.cpu.steal -m kernel.all.cpu.sys -m kernel.all.cpu.user -m kernel.all.cpu.wait.total -m kernel.all.cpu.irq.hard -m kernel.all.cpu.irq.soft

    - name: Do a full heartbeat
      minute: "10"
      hour: "*"
      job: ops-runner -f -s 15 -s 3600 -n ozc.send.heartbeat.full /usr/bin/ops-zagg-client --send-heartbeat

    - name: Do a quick heartbeat
      minute: "*/5"
      job: ops-runner -f -s 15 -n ozc.send.heartbeat.quick /usr/bin/ops-zagg-client -k heartbeat.ping -o 1

    - name: run filesystem space checks every 10 minutes
      minute: "*/10"
      job: ops-runner -f -s 15 -n csfm.filesys.full /usr/bin/cron-send-filesystem-metrics

    - name: run disk TPS checks every 2 minutes
      minute: "*/2"
      job: ops-runner -f -s 15 -n csdim.disk.tps /usr/bin/cron-send-disk-metrics

    - name: run network checks every 3 minutes
      minute: "*/3"
      job: ops-runner -f -s 15 -n csnm.network.int /usr/bin/cron-send-network-metrics

    # We might want to break docker checks out at some point.
    - name: run docker storage space checks every 10 minutes
      minute: "*/10"
      job: ops-runner -f -s 15 -n csdm.docker.storage /usr/bin/cron-send-docker-metrics

    - name: run docker info timer
      minute: "*/10"
      job: ops-runner -f -s 15 -n csdt.docker.timer /usr/bin/cron-send-docker-timer

    - name: run docker dns test
      minute: "*/5"
      job: ops-runner -f -s 15 -n csddr.docker.dns.resolution /usr/bin/cron-send-docker-dns-resolution

    - name: run docker dns test on existing containers
      minute: "*/5"
      job: ops-runner -f -s 15 -n csdedr.docker.existing.dns.resolution /usr/bin/cron-send-docker-existing-dns-resolution

    # Openshift node checks
    g_zagg_client_node_crons:
    - name: send openshift-node process count
      minute: "*/2"
      job: ops-runner -f -s 15 -n cspc.openshift.node.process.count /usr/bin/cron-send-process-count '^/usr/bin/openshift start node' openshift.node.process.count

    - name: send ovs status data
      minute: "*/5"
      job: ops-runner -f -s 15 -n csos.openshift.master.ovs.status /usr/bin/cron-send-ovs-status

    - name: fix and report on stray OVS rules
      minute: "*/5"
      job: ops-runner -f -s 15 -n cfor.openshift.node.ovs.stray.rules /usr/bin/cron-fix-ovs-rules

    - name: send cluster docker registry checks
      minute: "*/2"
      job: ops-runner -f -s 15 -n csrc.openshift.node.registry.checks /usr/bin/cron-send-registry-checks

    # Openshift Master checks
    g_zagg_client_master_crons:
    - name: run create app every 5 minutes
      minute: "*/5"
      job: "export ZAGG_CLIENT_HOSTNAME={{ g_zagg_client_config.host.name }}; ops-runner -f -s 15 -n csca.openshift.master.app.create /usr/bin/cron-send-create-app &>> /var/log/create_app.log"

    - name: run create app with build process every 30 minutes
      minute: "*/30"
      job: "export ZAGG_CLIENT_HOSTNAME={{ g_zagg_client_config.host.name }}; ops-runner -f -s 15 -n csca.openshift.master.app.build.create /usr/bin/cron-send-build-app"

    - name: send openshift-master process count
      minute: "*/2"
      job: ops-runner -f -s 15 -n cspc.openshift.master.process.count /usr/bin/cron-send-process-count '^/usr/bin/openshift start master controllers' openshift.master.process.count
      condition: "{{ g_oso_master_ha|bool }}"

    - name: send openshift-master process count
      minute: "*/2"
      job: ops-runner -f -s 15 -n cspc.openshift.master.process.count /usr/bin/cron-send-process-count '^/usr/bin/openshift start master' openshift.master.process.count
      condition: "{{ not g_oso_master_ha|bool }}"

    - name: send openshift-master counts (user, pod, project) every 2 hours
      hour: "*/2"
      minute: "0"
      job: ops-runner -f -s 15 -n csosmm.openshift.master.counts /usr/bin/cron-send-os-master-metrics --project-count --pod-count --user-count --pv-info

    - name: send openshift-master /healthz status every 4 minutes
      minute: "*/4"
      job: ops-runner -f -s 15 -n csosmm.openshift.master.api.healthz /usr/bin/cron-send-os-master-metrics --healthz --api-ping --metrics --nodes-not-ready

    - name: send openshift-master local (test https://127.0.0.1) status every 5 minutes
      minute: "*/5"
      job: ops-runner -f -s 15 -n csosmm.openshift.master.api.healthz /usr/bin/cron-send-os-master-metrics --local

    - name: send openshift-master SkyDNS status every 4 minutes
      minute: "*/4"
      job: ops-runner -f -s 50 -n csosms.openshift.master.skydns /usr/bin/cron-send-os-skydns-checks

    - name: send openshift-master etcd status
      minute: "*/2"
      job: ops-runner -f -s 15 -n cspc.openshift.master.etcd.status /usr/bin/cron-send-etcd-status

    - name: send S3 bucket metrics weekly
      hour: "3"
      minute: "0"
      job: ops-runner -f -s 90 -n cssm.aws /usr/bin/cron-send-s3-metrics

    - name: send kubeconfig parser check
      minute: "*/5"
      job: ops-runner -f -s 30 -n cskc.openshift.master.kubeconfig.status /usr/bin/cron-send-check-kubeconfig 

  pre_tasks:
  - stat:
      path: /secrets/host_monitoring_vars.yml
    register: g_host_monitoring_vars

  - name: Load variables that will override the defaults
    include_vars: /secrets/host_monitoring_vars.yml
    when: g_host_monitoring_vars.stat.exists

  - fail: msg="This playbook requires {{ item }} to be set and not empty."
    when: "{{ item }} is not defined or not {{ item }}"
    with_items:
    - g_zagg_client_config
    - g_oso_host_type
    - g_oso_cluster_id

  - debug: var=g_zagg_client_config

  - name: Generate the zagg_client.yaml config file
    copy:
      content: "{{ g_zagg_client_config | to_nice_yaml }}"
      dest: /etc/openshift_tools/zagg_client.yaml
      mode: "644"

  - name: Check whether /etc/origin exists
    stat:
      path: /etc/origin
    register: etc_origin

  - name: Create /etc/origin -> /etc/openshift link if needed
    file:
      state: link
      src: /etc/openshift
      dest: /etc/origin
      force: yes
    when: etc_origin.stat.exists == False and g_oso_host_type == 'master'

  - name: Setup Cron
    cron:
      name: "{{ item.name }}"
      job: "{{ item.job }}"
      minute: "{{ item.minute | default('*', True) }}"
      hour: "{{ item.hour | default('*', True) }}"
      day: "{{ item.day | default('*', True) }}"
      month: "{{ item.month | default('*', True) }}"
      weekday: "{{ item.weekday | default('*', True) }}"
    with_items: g_zagg_client_cron

  - name: Setup Openshift Node Crons
    cron:
      name: "{{ item.name }}"
      job: "{{ item.job }}"
      minute: "{{ item.minute | default('*', True) }}"
      hour: "{{ item.hour | default('*', True) }}"
      day: "{{ item.day | default('*', True) }}"
      month: "{{ item.month | default('*', True) }}"
      weekday: "{{ item.weekday | default('*', True) }}"
    with_items: g_zagg_client_node_crons
    when: g_oso_host_type == 'master' or g_oso_host_type == 'node'

  - name: Setup Master Crons
    cron:
      name: "{{ item.name }}"
      job: "{{ item.job }}"
      minute: "{{ item.minute | default('*', True) }}"
      hour: "{{ item.hour | default('*', True) }}"
      day: "{{ item.day | default('*', True) }}"
      month: "{{ item.month | default('*', True) }}"
      weekday: "{{ item.weekday | default('*', True) }}"
    when: "{{ g_oso_host_type == 'master' and (item.condition|default(True,True)) }}"
    with_items: g_zagg_client_master_crons

  - name: stat the kubeconfig
    stat:
      path: /etc/origin/master/admin.kubeconfig
    register: kubepath

  - name: copy kubeconfig to tmp
    copy:
      src: /etc/origin/master/admin.kubeconfig
      dest: /tmp/admin.kubeconfig
      mode: '0770'
    when: kubepath.stat.exists
